kezang@DESKTOP-KARGCVS:/mnt/c/Users/kezang/Downloads/Assignment 1_2/Assignment 1/bomb002$ gdb bomb
GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from bomb...
(gdb) b phase_5
Breakpoint 1 at 0x40107b
(gdb) run
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /mnt/c/Users/kezang/Downloads/Assignment 1_2/Assignment 1/bomb002/bomb
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Public speaking is very easy.
Phase 1 defused. How about the next one?
1 2 4 8 16 32
That's number 2.  Keep going!
2 490
Halfway there!
24 2
So you got that one.  Try this one.
5 12                                                    // I have given user input as 5 and 12

Breakpoint 1, 0x000000000040107b in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
=> 0x000000000040107b <+0>:     sub    $0x18,%rsp
   0x000000000040107f <+4>:     mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:    mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:    xor    %eax,%eax
   0x000000000040108f <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:    mov    %rsp,%rdx
   0x0000000000401097 <+28>:    mov    $0x4025b7,%esi
   0x000000000040109c <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:    cmp    $0x1,%eax
   0x00000000004010a4 <+41>:    jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:    callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:    mov    (%rsp),%eax
   0x00000000004010ae <+51>:    and    $0xf,%eax
   0x00000000004010b1 <+54>:    mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:    cmp    $0xf,%eax
   0x00000000004010b7 <+60>:    je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:    mov    $0x0,%ecx
   0x00000000004010be <+67>:    mov    $0x0,%edx
   0x00000000004010c3 <+72>:    add    $0x1,%edx
   0x00000000004010c6 <+75>:    cltq
   0x00000000004010c8 <+77>:    mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:    add    %eax,%ecx
   0x00000000004010d1 <+86>:    cmp    $0xf,%eax
   0x00000000004010d4 <+89>:    jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:    movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:    cmp    $0xf,%edx
   0x00000000004010e0 <+101>:   jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:   je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:   callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:   xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:   je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:   add    $0x18,%rsp
   0x0000000000401106 <+139>:   retq
End of assembler dump.
(gdb) u* 0x00000000004010a1                                            // I have used this command to move to particular line
0x00000000004010a1 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:     sub    $0x18,%rsp
   0x000000000040107f <+4>:     mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:    mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:    xor    %eax,%eax
   0x000000000040108f <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:    mov    %rsp,%rdx 
   0x0000000000401097 <+28>:    mov    $0x4025b7,%esi
   0x000000000040109c <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
=> 0x00000000004010a1 <+38>:    cmp    $0x1,%eax                           //1 is compare with eax which is 2
   0x00000000004010a4 <+41>:    jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:    callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:    mov    (%rsp),%eax
   0x00000000004010ae <+51>:    and    $0xf,%eax
   0x00000000004010b1 <+54>:    mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:    cmp    $0xf,%eax
   0x00000000004010b7 <+60>:    je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:    mov    $0x0,%ecx
   0x00000000004010be <+67>:    mov    $0x0,%edx
   0x00000000004010c3 <+72>:    add    $0x1,%edx
   0x00000000004010c6 <+75>:    cltq
   0x00000000004010c8 <+77>:    mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:    add    %eax,%ecx
   0x00000000004010d1 <+86>:    cmp    $0xf,%eax
   0x00000000004010d4 <+89>:    jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:    movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:    cmp    $0xf,%edx
   0x00000000004010e0 <+101>:   jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:   je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:   callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:   xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:   je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:   add    $0x18,%rsp
   0x0000000000401106 <+139>:   retq
End of assembler dump.
(gdb) ni
0x00000000004010a4 in phase_5 ()
(gdb) ni
0x00000000004010ab in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:     sub    $0x18,%rsp
   0x000000000040107f <+4>:     mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:    mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:    xor    %eax,%eax
   0x000000000040108f <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:    mov    %rsp,%rdx
   0x0000000000401097 <+28>:    mov    $0x4025b7,%esi
   0x000000000040109c <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:    cmp    $0x1,%eax
   0x00000000004010a4 <+41>:    jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:    callq  0x401438 <explode_bomb>
=> 0x00000000004010ab <+48>:    mov    (%rsp),%eax          //since value of eax which 2 greater than 1 so bomb will not explode.
   0x00000000004010ae <+51>:    and    $0xf,%eax
   0x00000000004010b1 <+54>:    mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:    cmp    $0xf,%eax
   0x00000000004010b7 <+60>:    je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:    mov    $0x0,%ecx
   0x00000000004010be <+67>:    mov    $0x0,%edx
   0x00000000004010c3 <+72>:    add    $0x1,%edx
   0x00000000004010c6 <+75>:    cltq
   0x00000000004010c8 <+77>:    mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:    add    %eax,%ecx
   0x00000000004010d1 <+86>:    cmp    $0xf,%eax
   0x00000000004010d4 <+89>:    jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:    movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:    cmp    $0xf,%edx
   0x00000000004010e0 <+101>:   jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:   je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:   callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:   xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:   je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:   add    $0x18,%rsp
   0x0000000000401106 <+139>:   retq
End of assembler dump.
(gdb) x/d $rsp                                                        //This command is used for finding value of rsp which is 5
0x7ffffffee380: 5
(gdb) ni
0x00000000004010ae in phase_5 ()
(gdb) ni
0x00000000004010b1 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:     sub    $0x18,%rsp
   0x000000000040107f <+4>:     mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:    mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:    xor    %eax,%eax
   0x000000000040108f <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:    mov    %rsp,%rdx
   0x0000000000401097 <+28>:    mov    $0x4025b7,%esi
   0x000000000040109c <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:    cmp    $0x1,%eax
   0x00000000004010a4 <+41>:    jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:    callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:    mov    (%rsp),%eax
   0x00000000004010ae <+51>:    and    $0xf,%eax
=> 0x00000000004010b1 <+54>:    mov    %eax,(%rsp) 
   0x00000000004010b4 <+57>:    cmp    $0xf,%eax
   0x00000000004010b7 <+60>:    je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:    mov    $0x0,%ecx
   0x00000000004010be <+67>:    mov    $0x0,%edx
   0x00000000004010c3 <+72>:    add    $0x1,%edx
   0x00000000004010c6 <+75>:    cltq
   0x00000000004010c8 <+77>:    mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:    add    %eax,%ecx
   0x00000000004010d1 <+86>:    cmp    $0xf,%eax
   0x00000000004010d4 <+89>:    jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:    movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:    cmp    $0xf,%edx
   0x00000000004010e0 <+101>:   jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:   je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:   callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:   xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:   je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:   add    $0x18,%rsp
   0x0000000000401106 <+139>:   retq
End of assembler dump.
(gdb) ni
0x00000000004010b4 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:     sub    $0x18,%rsp
   0x000000000040107f <+4>:     mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:    mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:    xor    %eax,%eax
   0x000000000040108f <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:    mov    %rsp,%rdx
   0x0000000000401097 <+28>:    mov    $0x4025b7,%esi
   0x000000000040109c <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:    cmp    $0x1,%eax
   0x00000000004010a4 <+41>:    jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:    callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:    mov    (%rsp),%eax
   0x00000000004010ae <+51>:    and    $0xf,%eax
   0x00000000004010b1 <+54>:    mov    %eax,(%rsp)
=> 0x00000000004010b4 <+57>:    cmp    $0xf,%eax                                 //0xf=15 which compare with eax which is 5
   0x00000000004010b7 <+60>:    je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:    mov    $0x0,%ecx
   0x00000000004010be <+67>:    mov    $0x0,%edx
   0x00000000004010c3 <+72>:    add    $0x1,%edx
   0x00000000004010c6 <+75>:    cltq
   0x00000000004010c8 <+77>:    mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:    add    %eax,%ecx
   0x00000000004010d1 <+86>:    cmp    $0xf,%eax
   0x00000000004010d4 <+89>:    jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:    movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:    cmp    $0xf,%edx
   0x00000000004010e0 <+101>:   jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:   je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:   callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:   xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:   je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:   add    $0x18,%rsp
   0x0000000000401106 <+139>:   retq
End of assembler dump.
(gdb) ni
0x00000000004010b7 in phase_5 ()
(gdb) i r
rax            0x5                 5
rbx            0x4021f0            4202992
rcx            0x0                 0
rdx            0x7ffffffee384      140737488282500
rsi            0x0                 0
rdi            0x7ffffffedd30      140737488280880
rbp            0x0                 0x0
rsp            0x7ffffffee380      0x7ffffffee380
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7fffff74eac0      140737479240384
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7ffffffee490      140737488282768
r14            0x0                 0
r15            0x0                 0
rip            0x4010b7            0x4010b7 <phase_5+60>
eflags         0x297               [ CF PF AF SF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:     sub    $0x18,%rsp
   0x000000000040107f <+4>:     mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:    mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:    xor    %eax,%eax
   0x000000000040108f <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:    mov    %rsp,%rdx
   0x0000000000401097 <+28>:    mov    $0x4025b7,%esi
   0x000000000040109c <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:    cmp    $0x1,%eax
   0x00000000004010a4 <+41>:    jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:    callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:    mov    (%rsp),%eax
   0x00000000004010ae <+51>:    and    $0xf,%eax
   0x00000000004010b1 <+54>:    mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:    cmp    $0xf,%eax
=> 0x00000000004010b7 <+60>:    je     0x4010e8 <phase_5+109>   //since it not equal it will not explode.It wil move to next line
   0x00000000004010b9 <+62>:    mov    $0x0,%ecx
   0x00000000004010be <+67>:    mov    $0x0,%edx
   0x00000000004010c3 <+72>:    add    $0x1,%edx
   0x00000000004010c6 <+75>:    cltq
   0x00000000004010c8 <+77>:    mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:    add    %eax,%ecx
   0x00000000004010d1 <+86>:    cmp    $0xf,%eax
   0x00000000004010d4 <+89>:    jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:    movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:    cmp    $0xf,%edx
   0x00000000004010e0 <+101>:   jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:   je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:   callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:   xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:   je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:   add    $0x18,%rsp
   0x0000000000401106 <+139>:   retq
End of assembler dump.
(gdb) ni
0x00000000004010b9 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:     sub    $0x18,%rsp
   0x000000000040107f <+4>:     mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:    mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:    xor    %eax,%eax
   0x000000000040108f <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:    mov    %rsp,%rdx
   0x0000000000401097 <+28>:    mov    $0x4025b7,%esi
   0x000000000040109c <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:    cmp    $0x1,%eax
   0x00000000004010a4 <+41>:    jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:    callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:    mov    (%rsp),%eax
   0x00000000004010ae <+51>:    and    $0xf,%eax
   0x00000000004010b1 <+54>:    mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:    cmp    $0xf,%eax
   0x00000000004010b7 <+60>:    je     0x4010e8 <phase_5+109>
=> 0x00000000004010b9 <+62>:    mov    $0x0,%ecx                                         //0 is move to ecx
   0x00000000004010be <+67>:    mov    $0x0,%edx                                         //0 is move to edx
   0x00000000004010c3 <+72>:    add    $0x1,%edx                                         //1 is move to edx
   0x00000000004010c6 <+75>:    cltq
   0x00000000004010c8 <+77>:    mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:    add    %eax,%ecx
   0x00000000004010d1 <+86>:    cmp    $0xf,%eax
   0x00000000004010d4 <+89>:    jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:    movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:    cmp    $0xf,%edx
   0x00000000004010e0 <+101>:   jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:   je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:   callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:   xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:   je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:   add    $0x18,%rsp
   0x0000000000401106 <+139>:   retq 
End of assembler dump.
(gdb) ni
0x00000000004010be in phase_5 ()
(gdb) ni
0x00000000004010c3 in phase_5 ()
(gdb) ni
0x00000000004010c6 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:     sub    $0x18,%rsp
   0x000000000040107f <+4>:     mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:    mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:    xor    %eax,%eax
   0x000000000040108f <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:    mov    %rsp,%rdx
   0x0000000000401097 <+28>:    mov    $0x4025b7,%esi
   0x000000000040109c <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:    cmp    $0x1,%eax
   0x00000000004010a4 <+41>:    jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:    callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:    mov    (%rsp),%eax
   0x00000000004010ae <+51>:    and    $0xf,%eax
   0x00000000004010b1 <+54>:    mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:    cmp    $0xf,%eax
   0x00000000004010b7 <+60>:    je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:    mov    $0x0,%ecx
   0x00000000004010be <+67>:    mov    $0x0,%edx
   0x00000000004010c3 <+72>:    add    $0x1,%edx
=> 0x00000000004010c6 <+75>:    cltq
   0x00000000004010c8 <+77>:    mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:    add    %eax,%ecx
   0x00000000004010d1 <+86>:    cmp    $0xf,%eax
   0x00000000004010d4 <+89>:    jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:    movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:    cmp    $0xf,%edx
   0x00000000004010e0 <+101>:   jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:   je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:   callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:   xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:   je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:   add    $0x18,%rsp
   0x0000000000401106 <+139>:   retq
End of assembler dump.
(gdb) ni
0x00000000004010c8 in phase_5 ()
(gdb) ni
0x00000000004010cf in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:     sub    $0x18,%rsp
   0x000000000040107f <+4>:     mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:    mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:    xor    %eax,%eax
   0x000000000040108f <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:    mov    %rsp,%rdx
   0x0000000000401097 <+28>:    mov    $0x4025b7,%esi
   0x000000000040109c <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:    cmp    $0x1,%eax
   0x00000000004010a4 <+41>:    jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:    callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:    mov    (%rsp),%eax
   0x00000000004010ae <+51>:    and    $0xf,%eax
   0x00000000004010b1 <+54>:    mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:    cmp    $0xf,%eax
   0x00000000004010b7 <+60>:    je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:    mov    $0x0,%ecx
   0x00000000004010be <+67>:    mov    $0x0,%edx
   0x00000000004010c3 <+72>:    add    $0x1,%edx
   0x00000000004010c6 <+75>:    cltq
   0x00000000004010c8 <+77>:    mov    0x402440(,%rax,4),%eax
=> 0x00000000004010cf <+84>:    add    %eax,%ecx                                     //eax is added with ecx and move to ecx
   0x00000000004010d1 <+86>:    cmp    $0xf,%eax
   0x00000000004010d4 <+89>:    jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:    movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:    cmp    $0xf,%edx
   0x00000000004010e0 <+101>:   jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:   je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:   callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:   xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:   je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:   add    $0x18,%rsp
   0x0000000000401106 <+139>:   retq
End of assembler dump.
(gdb) i r
rax            0xc                 12
rbx            0x4021f0            4202992
rcx            0x0                 0
rdx            0x1                 1
rsi            0x0                 0
rdi            0x7ffffffedd30      140737488280880
rbp            0x0                 0x0
rsp            0x7ffffffee380      0x7ffffffee380
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7fffff74eac0      140737479240384
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7ffffffee490      140737488282768
r14            0x0                 0
r15            0x0                 0
rip            0x4010cf            0x4010cf <phase_5+84>
eflags         0x202               [ IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:     sub    $0x18,%rsp
   0x000000000040107f <+4>:     mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:    mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:    xor    %eax,%eax
   0x000000000040108f <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:    mov    %rsp,%rdx
   0x0000000000401097 <+28>:    mov    $0x4025b7,%esi
   0x000000000040109c <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:    cmp    $0x1,%eax
   0x00000000004010a4 <+41>:    jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:    callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:    mov    (%rsp),%eax
   0x00000000004010ae <+51>:    and    $0xf,%eax
   0x00000000004010b1 <+54>:    mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:    cmp    $0xf,%eax
   0x00000000004010b7 <+60>:    je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:    mov    $0x0,%ecx
   0x00000000004010be <+67>:    mov    $0x0,%edx
   0x00000000004010c3 <+72>:    add    $0x1,%edx
   0x00000000004010c6 <+75>:    cltq
   0x00000000004010c8 <+77>:    mov    0x402440(,%rax,4),%eax
=> 0x00000000004010cf <+84>:    add    %eax,%ecx                 
   0x00000000004010d1 <+86>:    cmp    $0xf,%eax
   0x00000000004010d4 <+89>:    jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:    movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:    cmp    $0xf,%edx
   0x00000000004010e0 <+101>:   jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:   je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:   callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:   xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:   je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:   add    $0x18,%rsp
   0x0000000000401106 <+139>:   retq
End of assembler dump.
(gdb) ni
0x00000000004010d1 in phase_5 ()
(gdb) ni
0x00000000004010d4 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:     sub    $0x18,%rsp
   0x000000000040107f <+4>:     mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:    mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:    xor    %eax,%eax
   0x000000000040108f <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:    mov    %rsp,%rdx
   0x0000000000401097 <+28>:    mov    $0x4025b7,%esi
   0x000000000040109c <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:    cmp    $0x1,%eax
   0x00000000004010a4 <+41>:    jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:    callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:    mov    (%rsp),%eax
   0x00000000004010ae <+51>:    and    $0xf,%eax
   0x00000000004010b1 <+54>:    mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:    cmp    $0xf,%eax
   0x00000000004010b7 <+60>:    je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:    mov    $0x0,%ecx
   0x00000000004010be <+67>:    mov    $0x0,%edx
   0x00000000004010c3 <+72>:    add    $0x1,%edx
   0x00000000004010c6 <+75>:    cltq
   0x00000000004010c8 <+77>:    mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:    add    %eax,%ecx
   0x00000000004010d1 <+86>:    cmp    $0xf,%eax
=> 0x00000000004010d4 <+89>:    jne    0x4010c3 <phase_5+72>     //0xf is compare with eax since it is not equal it will be in loop until the eax value become 15.
   0x00000000004010d6 <+91>:    movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:    cmp    $0xf,%edx
   0x00000000004010e0 <+101>:   jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:   je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:   callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:   xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:   je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:   add    $0x18,%rsp
   0x0000000000401106 <+139>:   retq
End of assembler dump.
(gdb) ni
0x00000000004010c3 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:     sub    $0x18,%rsp
   0x000000000040107f <+4>:     mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:    mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:    xor    %eax,%eax
   0x000000000040108f <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:    mov    %rsp,%rdx
   0x0000000000401097 <+28>:    mov    $0x4025b7,%esi
   0x000000000040109c <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:    cmp    $0x1,%eax
   0x00000000004010a4 <+41>:    jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:    callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:    mov    (%rsp),%eax
   0x00000000004010ae <+51>:    and    $0xf,%eax
   0x00000000004010b1 <+54>:    mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:    cmp    $0xf,%eax
   0x00000000004010b7 <+60>:    je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:    mov    $0x0,%ecx
   0x00000000004010be <+67>:    mov    $0x0,%edx
=> 0x00000000004010c3 <+72>:    add    $0x1,%edx                                      //it is in loop till eax value become 15
   0x00000000004010c6 <+75>:    cltq
   0x00000000004010c8 <+77>:    mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:    add    %eax,%ecx
   0x00000000004010d1 <+86>:    cmp    $0xf,%eax
   0x00000000004010d4 <+89>:    jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:    movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:    cmp    $0xf,%edx
   0x00000000004010e0 <+101>:   jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:   je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:   callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:   xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:   je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:   add    $0x18,%rsp
   0x0000000000401106 <+139>:   retq
End of assembler dump.
(gdb) ni
0x00000000004010c6 in phase_5 ()
(gdb) ni
0x00000000004010c8 in phase_5 ()
(gdb) ni
0x00000000004010cf in phase_5 ()
(gdb) ni
0x00000000004010d1 in phase_5 ()
(gdb) ni
0x00000000004010d4 in phase_5 ()
(gdb) ni
0x00000000004010c3 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:     sub    $0x18,%rsp
   0x000000000040107f <+4>:     mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:    mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:    xor    %eax,%eax
   0x000000000040108f <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:    mov    %rsp,%rdx
   0x0000000000401097 <+28>:    mov    $0x4025b7,%esi
   0x000000000040109c <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:    cmp    $0x1,%eax
   0x00000000004010a4 <+41>:    jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:    callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:    mov    (%rsp),%eax
   0x00000000004010ae <+51>:    and    $0xf,%eax
   0x00000000004010b1 <+54>:    mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:    cmp    $0xf,%eax
   0x00000000004010b7 <+60>:    je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:    mov    $0x0,%ecx
   0x00000000004010be <+67>:    mov    $0x0,%edx
=> 0x00000000004010c3 <+72>:    add    $0x1,%edx
   0x00000000004010c6 <+75>:    cltq
   0x00000000004010c8 <+77>:    mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:    add    %eax,%ecx
   0x00000000004010d1 <+86>:    cmp    $0xf,%eax
   0x00000000004010d4 <+89>:    jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:    movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:    cmp    $0xf,%edx
   0x00000000004010e0 <+101>:   jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:   je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:   callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:   xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:   je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:   add    $0x18,%rsp
   0x0000000000401106 <+139>:   retq
End of assembler dump.
(gdb) ni
0x00000000004010c6 in phase_5 ()
(gdb) ni
0x00000000004010c8 in phase_5 ()
(gdb) ni
0x00000000004010cf in phase_5 ()
(gdb) ni
0x00000000004010d1 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:     sub    $0x18,%rsp
   0x000000000040107f <+4>:     mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:    mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:    xor    %eax,%eax
   0x000000000040108f <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:    mov    %rsp,%rdx
   0x0000000000401097 <+28>:    mov    $0x4025b7,%esi
   0x000000000040109c <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:    cmp    $0x1,%eax
   0x00000000004010a4 <+41>:    jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:    callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:    mov    (%rsp),%eax
   0x00000000004010ae <+51>:    and    $0xf,%eax
   0x00000000004010b1 <+54>:    mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:    cmp    $0xf,%eax
   0x00000000004010b7 <+60>:    je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:    mov    $0x0,%ecx
   0x00000000004010be <+67>:    mov    $0x0,%edx
   0x00000000004010c3 <+72>:    add    $0x1,%edx
   0x00000000004010c6 <+75>:    cltq
   0x00000000004010c8 <+77>:    mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:    add    %eax,%ecx
=> 0x00000000004010d1 <+86>:    cmp    $0xf,%eax
   0x00000000004010d4 <+89>:    jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:    movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:    cmp    $0xf,%edx
   0x00000000004010e0 <+101>:   jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:   je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:   callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:   xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:   je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:   add    $0x18,%rsp
   0x0000000000401106 <+139>:   retq
End of assembler dump.
(gdb) u*0x00000000004010d6                                                       //i have used this command to move to +91 line
0x00000000004010d6 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:     sub    $0x18,%rsp
   0x000000000040107f <+4>:     mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:    mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:    xor    %eax,%eax
   0x000000000040108f <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:    mov    %rsp,%rdx
   0x0000000000401097 <+28>:    mov    $0x4025b7,%esi
   0x000000000040109c <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:    cmp    $0x1,%eax
   0x00000000004010a4 <+41>:    jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:    callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:    mov    (%rsp),%eax
   0x00000000004010ae <+51>:    and    $0xf,%eax
   0x00000000004010b1 <+54>:    mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:    cmp    $0xf,%eax
   0x00000000004010b7 <+60>:    je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:    mov    $0x0,%ecx
   0x00000000004010be <+67>:    mov    $0x0,%edx
   0x00000000004010c3 <+72>:    add    $0x1,%edx
   0x00000000004010c6 <+75>:    cltq
   0x00000000004010c8 <+77>:    mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:    add    %eax,%ecx
   0x00000000004010d1 <+86>:    cmp    $0xf,%eax
   0x00000000004010d4 <+89>:    jne    0x4010c3 <phase_5+72>
=> 0x00000000004010d6 <+91>:    movl   $0xf,(%rsp)                  //After so many comparsion we get eax value as 15 so we have reached +91 line. so we can get first interger as 5.
   0x00000000004010dd <+98>:    cmp    $0xf,%edx
   0x00000000004010e0 <+101>:   jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:   je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:   callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:   xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:   je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:   add    $0x18,%rsp
   0x0000000000401106 <+139>:   retq
End of assembler dump.
(gdb) x/d $rsp
0x7ffffffee380: 5
(gdb) ni
0x00000000004010dd in phase_5 ()
(gdb) ni
0x00000000004010e0 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:     sub    $0x18,%rsp
   0x000000000040107f <+4>:     mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:    mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:    xor    %eax,%eax
   0x000000000040108f <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:    mov    %rsp,%rdx
   0x0000000000401097 <+28>:    mov    $0x4025b7,%esi
   0x000000000040109c <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:    cmp    $0x1,%eax
   0x00000000004010a4 <+41>:    jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:    callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:    mov    (%rsp),%eax
   0x00000000004010ae <+51>:    and    $0xf,%eax
   0x00000000004010b1 <+54>:    mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:    cmp    $0xf,%eax
   0x00000000004010b7 <+60>:    je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:    mov    $0x0,%ecx
   0x00000000004010be <+67>:    mov    $0x0,%edx
   0x00000000004010c3 <+72>:    add    $0x1,%edx
   0x00000000004010c6 <+75>:    cltq
   0x00000000004010c8 <+77>:    mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:    add    %eax,%ecx
   0x00000000004010d1 <+86>:    cmp    $0xf,%eax
   0x00000000004010d4 <+89>:    jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:    movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:    cmp    $0xf,%edx
=> 0x00000000004010e0 <+101>:   jne    0x4010e8 <phase_5+109>       //0xf is compare with edx if it is not equal it will jump to +109 line but is equal it will not jump.
   0x00000000004010e2 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:   je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:   callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:   xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:   je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:   add    $0x18,%rsp
   0x0000000000401106 <+139>:   retq
End of assembler dump.
(gdb) i r
rax            0xf                 15
rbx            0x4021f0            4202992
rcx            0x73                115
rdx            0xf                 15           //the value of edx is 15
rsi            0x0                 0
rdi            0x7ffffffedd30      140737488280880
rbp            0x0                 0x0
rsp            0x7ffffffee380      0x7ffffffee380
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7fffff74eac0      140737479240384
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7ffffffee490      140737488282768
r14            0x0                 0
r15            0x0                 0
rip            0x4010e0            0x4010e0 <phase_5+101>
eflags         0x246               [ PF ZF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:     sub    $0x18,%rsp
   0x000000000040107f <+4>:     mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:    mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:    xor    %eax,%eax
   0x000000000040108f <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:    mov    %rsp,%rdx
   0x0000000000401097 <+28>:    mov    $0x4025b7,%esi
   0x000000000040109c <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:    cmp    $0x1,%eax
   0x00000000004010a4 <+41>:    jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:    callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:    mov    (%rsp),%eax
   0x00000000004010ae <+51>:    and    $0xf,%eax
   0x00000000004010b1 <+54>:    mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:    cmp    $0xf,%eax
   0x00000000004010b7 <+60>:    je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:    mov    $0x0,%ecx
   0x00000000004010be <+67>:    mov    $0x0,%edx
   0x00000000004010c3 <+72>:    add    $0x1,%edx
   0x00000000004010c6 <+75>:    cltq
   0x00000000004010c8 <+77>:    mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:    add    %eax,%ecx
   0x00000000004010d1 <+86>:    cmp    $0xf,%eax
   0x00000000004010d4 <+89>:    jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:    movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:    cmp    $0xf,%edx
=> 0x00000000004010e0 <+101>:   jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:   je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:   callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:   xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:   je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:   add    $0x18,%rsp
   0x0000000000401106 <+139>:   retq
End of assembler dump.
(gdb) ni
0x00000000004010e2 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:     sub    $0x18,%rsp
   0x000000000040107f <+4>:     mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:    mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:    xor    %eax,%eax
   0x000000000040108f <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:    mov    %rsp,%rdx
   0x0000000000401097 <+28>:    mov    $0x4025b7,%esi
   0x000000000040109c <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:    cmp    $0x1,%eax
   0x00000000004010a4 <+41>:    jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:    callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:    mov    (%rsp),%eax
   0x00000000004010ae <+51>:    and    $0xf,%eax
   0x00000000004010b1 <+54>:    mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:    cmp    $0xf,%eax
   0x00000000004010b7 <+60>:    je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:    mov    $0x0,%ecx
   0x00000000004010be <+67>:    mov    $0x0,%edx
   0x00000000004010c3 <+72>:    add    $0x1,%edx
   0x00000000004010c6 <+75>:    cltq
   0x00000000004010c8 <+77>:    mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:    add    %eax,%ecx
   0x00000000004010d1 <+86>:    cmp    $0xf,%eax
   0x00000000004010d4 <+89>:    jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:    movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:    cmp    $0xf,%edx
   0x00000000004010e0 <+101>:   jne    0x4010e8 <phase_5+109>
=> 0x00000000004010e2 <+103>:   cmp    0x4(%rsp),%ecx            // 0x4(%rsp) is compare with ecx where ecx is 115 since it is not equal our bomb will explode.
   0x00000000004010e6 <+107>:   je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:   callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:   xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:   je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:   add    $0x18,%rsp
   0x0000000000401106 <+139>:   retq
End of assembler dump.
(gdb) ni
0x00000000004010e6 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:     sub    $0x18,%rsp
   0x000000000040107f <+4>:     mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:    mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:    xor    %eax,%eax
   0x000000000040108f <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:    mov    %rsp,%rdx
   0x0000000000401097 <+28>:    mov    $0x4025b7,%esi
   0x000000000040109c <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:    cmp    $0x1,%eax
   0x00000000004010a4 <+41>:    jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:    callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:    mov    (%rsp),%eax
   0x00000000004010ae <+51>:    and    $0xf,%eax
   0x00000000004010b1 <+54>:    mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:    cmp    $0xf,%eax
   0x00000000004010b7 <+60>:    je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:    mov    $0x0,%ecx
   0x00000000004010be <+67>:    mov    $0x0,%edx
   0x00000000004010c3 <+72>:    add    $0x1,%edx
   0x00000000004010c6 <+75>:    cltq
   0x00000000004010c8 <+77>:    mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:    add    %eax,%ecx
   0x00000000004010d1 <+86>:    cmp    $0xf,%eax
   0x00000000004010d4 <+89>:    jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:    movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:    cmp    $0xf,%edx
   0x00000000004010e0 <+101>:   jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:   cmp    0x4(%rsp),%ecx
=> 0x00000000004010e6 <+107>:   je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:   callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:   xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:   je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:   add    $0x18,%rsp
   0x0000000000401106 <+139>:   retq
End of assembler dump.
(gdb) x/d $rsp+0x4
0x7ffffffee384: 12
(gdb) i r
rax            0xf                 15
rbx            0x4021f0            4202992
rcx            0x73                115                                                       //the value of ecx is 115
rdx            0xf                 15
rsi            0x0                 0
rdi            0x7ffffffedd30      140737488280880
rbp            0x0                 0x0
rsp            0x7ffffffee380      0x7ffffffee380
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7fffff74eac0      140737479240384
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7ffffffee490      140737488282768
r14            0x0                 0
r15            0x0                 0
rip            0x4010e6            0x4010e6 <phase_5+107>
eflags         0x212               [ AF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:     sub    $0x18,%rsp
   0x000000000040107f <+4>:     mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:    mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:    xor    %eax,%eax
   0x000000000040108f <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:    mov    %rsp,%rdx
   0x0000000000401097 <+28>:    mov    $0x4025b7,%esi
   0x000000000040109c <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:    cmp    $0x1,%eax
   0x00000000004010a4 <+41>:    jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:    callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:    mov    (%rsp),%eax
   0x00000000004010ae <+51>:    and    $0xf,%eax
   0x00000000004010b1 <+54>:    mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:    cmp    $0xf,%eax
   0x00000000004010b7 <+60>:    je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:    mov    $0x0,%ecx
   0x00000000004010be <+67>:    mov    $0x0,%edx
   0x00000000004010c3 <+72>:    add    $0x1,%edx
   0x00000000004010c6 <+75>:    cltq
   0x00000000004010c8 <+77>:    mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:    add    %eax,%ecx
   0x00000000004010d1 <+86>:    cmp    $0xf,%eax
   0x00000000004010d4 <+89>:    jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:    movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:    cmp    $0xf,%edx
   0x00000000004010e0 <+101>:   jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:   cmp    0x4(%rsp),%ecx
=> 0x00000000004010e6 <+107>:   je     0x4010ed <phase_5+114>
   0x00000000004010e8 <+109>:   callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:   xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:   je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:   add    $0x18,%rsp
   0x0000000000401106 <+139>:   retq
End of assembler dump.
(gdb) ni
0x00000000004010e8 in phase_5 ()
(gdb) disas
Dump of assembler code for function phase_5:
   0x000000000040107b <+0>:     sub    $0x18,%rsp
   0x000000000040107f <+4>:     mov    %fs:0x28,%rax
   0x0000000000401088 <+13>:    mov    %rax,0x8(%rsp)
   0x000000000040108d <+18>:    xor    %eax,%eax
   0x000000000040108f <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000401094 <+25>:    mov    %rsp,%rdx
   0x0000000000401097 <+28>:    mov    $0x4025b7,%esi
   0x000000000040109c <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x00000000004010a1 <+38>:    cmp    $0x1,%eax
   0x00000000004010a4 <+41>:    jg     0x4010ab <phase_5+48>
   0x00000000004010a6 <+43>:    callq  0x401438 <explode_bomb>
   0x00000000004010ab <+48>:    mov    (%rsp),%eax
   0x00000000004010ae <+51>:    and    $0xf,%eax
   0x00000000004010b1 <+54>:    mov    %eax,(%rsp)
   0x00000000004010b4 <+57>:    cmp    $0xf,%eax
   0x00000000004010b7 <+60>:    je     0x4010e8 <phase_5+109>
   0x00000000004010b9 <+62>:    mov    $0x0,%ecx
   0x00000000004010be <+67>:    mov    $0x0,%edx
   0x00000000004010c3 <+72>:    add    $0x1,%edx
   0x00000000004010c6 <+75>:    cltq
   0x00000000004010c8 <+77>:    mov    0x402440(,%rax,4),%eax
   0x00000000004010cf <+84>:    add    %eax,%ecx
   0x00000000004010d1 <+86>:    cmp    $0xf,%eax
   0x00000000004010d4 <+89>:    jne    0x4010c3 <phase_5+72>
   0x00000000004010d6 <+91>:    movl   $0xf,(%rsp)
   0x00000000004010dd <+98>:    cmp    $0xf,%edx
   0x00000000004010e0 <+101>:   jne    0x4010e8 <phase_5+109>
   0x00000000004010e2 <+103>:   cmp    0x4(%rsp),%ecx
   0x00000000004010e6 <+107>:   je     0x4010ed <phase_5+114>
=> 0x00000000004010e8 <+109>:   callq  0x401438 <explode_bomb>
   0x00000000004010ed <+114>:   mov    0x8(%rsp),%rax
   0x00000000004010f2 <+119>:   xor    %fs:0x28,%rax
   0x00000000004010fb <+128>:   je     0x401102 <phase_5+135>
   0x00000000004010fd <+130>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000401102 <+135>:   add    $0x18,%rsp
   0x0000000000401106 <+139>:   retq
End of assembler dump.
(gdb) ni
                          //since our value is of 0x4(%rsp) is 12 it is not equal so i came to conclusion that i should have 115 as second interger inorder to be equal with ecx so that bomb donot explode. so our two integer is 5 and 115.

BOOM!!!
The bomb has blown up.
[Inferior 1 (process 28) exited with code 010]
(gdb) delete breakpoint
Delete all breakpoints? (y or n) y
(gdb) run
Starting program: /mnt/c/Users/kezang/Downloads/Assignment 1_2/Assignment 1/bomb002/bomb
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Public speaking is very easy.
Phase 1 defused. How about the next one?
1 2 4 8 16 32
That's number 2.  Keep going!
2 490
Halfway there!
24 2
So you got that one.  Try this one.
5 115
Good work!  On to the next...